!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
B64_ERR	bstraux.c	370;"	d	file:
B64_PAD	bstraux.c	369;"	d	file:
BSSSC_BUFF_LEN	bstrlib.c	2289;"	d	file:
BSTRAUX_INCLUDE	bstraux.h	17;"	d
BSTRLIB_BSAFE_INCLUDE	bsafe.h	18;"	d
BSTRLIB_CANNOT_USE_IOSTREAM	bstrwrap.h	27;"	d
BSTRLIB_CANNOT_USE_STL	bstrwrap.h	24;"	d
BSTRLIB_CAN_USE_IOSTREAM	bstrwrap.h	40;"	d
BSTRLIB_CAN_USE_STL	bstrwrap.h	34;"	d
BSTRLIB_INCLUDE	bstrlib.h	15;"	d
BSTRLIB_NOVSNP	bstrlib.c	2743;"	d	file:
BSTRLIB_NOVSNP	bstrlib.h	28;"	d
BSTRLIB_NOVSNP	bstrwrap.cpp	529;"	d	file:
BSTRLIB_THROWS_EXCEPTIONS	bstrwrap.h	47;"	d
BSTRWRAP_INCLUDE	bstrwrap.h	15;"	d
BSTR_BS_BUFF_LENGTH_GET	bstrlib.h	34;"	d
BSTR_ERR	bstrlib.h	32;"	d
BSTR_OK	bstrlib.h	33;"	d
BS_BUFF_SZ	bstrlib.c	1771;"	d	file:
BS_BUFF_SZ	bstrwrap.cpp	1628;"	d	file:
BWS_BUFF_SZ	bstraux.c	979;"	d	file:
Bstrlib	bstrwrap.cpp	/^namespace Bstrlib {$/;"	n	file:
Bstrlib	bstrwrap.h	/^namespace Bstrlib {$/;"	n
CBCharWriteProtected	bstrwrap.h	/^	CBCharWriteProtected (const struct tagbstring& c, int i) : s(c), idx((unsigned int)i) {$/;"	f	class:Bstrlib::CBCharWriteProtected
CBCharWriteProtected	bstrwrap.h	/^class CBCharWriteProtected {$/;"	c	namespace:Bstrlib
CBStream	bstrwrap.cpp	/^CBStream::CBStream (bNread readPtr, void * parm) {$/;"	f	class:Bstrlib::CBStream
CBStream	bstrwrap.h	/^struct CBStream {$/;"	s	namespace:Bstrlib
CBString	bstrwrap.cpp	/^CBString::CBString () {$/;"	f	class:Bstrlib::CBString
CBString	bstrwrap.cpp	/^CBString::CBString (char c) {$/;"	f	class:Bstrlib::CBString
CBString	bstrwrap.cpp	/^CBString::CBString (char c, int len) {$/;"	f	class:Bstrlib::CBString
CBString	bstrwrap.cpp	/^CBString::CBString (const CBString& b) {$/;"	f	class:Bstrlib::CBString
CBString	bstrwrap.cpp	/^CBString::CBString (const CBStringList& l) {$/;"	f	class:Bstrlib::CBString
CBString	bstrwrap.cpp	/^CBString::CBString (const char *s) {$/;"	f	class:Bstrlib::CBString
CBString	bstrwrap.cpp	/^CBString::CBString (const struct CBStringList& l, char sep) {$/;"	f	class:Bstrlib::CBString
CBString	bstrwrap.cpp	/^CBString::CBString (const struct CBStringList& l, const CBString& sep) {$/;"	f	class:Bstrlib::CBString
CBString	bstrwrap.cpp	/^CBString::CBString (const struct CBStringList& l, unsigned char sep) {$/;"	f	class:Bstrlib::CBString
CBString	bstrwrap.cpp	/^CBString::CBString (const tagbstring& x) {$/;"	f	class:Bstrlib::CBString
CBString	bstrwrap.cpp	/^CBString::CBString (const void * blk, int len) { $/;"	f	class:Bstrlib::CBString
CBString	bstrwrap.cpp	/^CBString::CBString (int len, const char *s) {$/;"	f	class:Bstrlib::CBString
CBString	bstrwrap.cpp	/^CBString::CBString (unsigned char c) {$/;"	f	class:Bstrlib::CBString
CBString	bstrwrap.h	/^struct CBString : public tagbstring {$/;"	s	namespace:Bstrlib
CBStringException	bstrwrap.h	/^	CBStringException (const std::string inmsg) : msg(inmsg) {}$/;"	f	struct:Bstrlib::CBStringException
CBStringException	bstrwrap.h	/^struct CBStringException : public std::exception {$/;"	s	namespace:Bstrlib
CBStringList	bstrwrap.h	/^struct CBStringList : public std::vector<CBString> {$/;"	s	namespace:Bstrlib
CFCLEN	bstrlib.c	1277;"	d	file:
CFCLEN	bstrlib.c	1287;"	d	file:
EMPTY_STRING	bstest.c	105;"	d	file:
EMPTY_STRING	robstest.c	105;"	d	file:
EXCEPTION_EXPECTED	test.cpp	130;"	d	file:
INITIAL_STATIC_FIND_INDEX_COUNT	bstrlib.c	1551;"	d	file:
INIT_SECURE_INPUT_LENGTH	bstraux.c	928;"	d	file:
LONG_BITS_QTY	bstrlib.c	1274;"	d	file:
LONG_LOG_BITS_QTY	bstrlib.c	1273;"	d	file:
LONG_STRING	bstest.c	107;"	d	file:
LONG_STRING	robstest.c	107;"	d	file:
LONG_TYPE	bstrlib.c	1275;"	d	file:
LOTS_OF_S	bstest.c	2472;"	d	file:
LOTS_OF_S	robstest.c	2472;"	d	file:
MAX_OB_LEN	bstraux.c	786;"	d	file:
SHORT_STRING	bstest.c	106;"	d	file:
SHORT_STRING	robstest.c	106;"	d	file:
START_VSNBUFF	bstrlib.c	2755;"	d	file:
START_VSNBUFF	bstrlib.c	2771;"	d	file:
START_VSNBUFF	bstrwrap.cpp	541;"	d	file:
START_VSNBUFF	bstrwrap.cpp	557;"	d	file:
UU_DECODE_BYTE	bstraux.c	491;"	d	file:
UU_ENCODE_BYTE	bstraux.c	711;"	d	file:
UU_MAX_LINELEN	bstraux.c	498;"	d	file:
_CRT_SECURE_NO_WARNINGS	bstrlib.c	15;"	d	file:
_CRT_SECURE_NO_WARNINGS	bstrwrap.cpp	15;"	d	file:
alloc	bstrwrap.cpp	/^void CBString::alloc (int len) {$/;"	f	class:Bstrlib::CBString
b	bstest.c	/^	bstring b;$/;"	m	struct:tagBss	file:
b	bstest.c	/^    bstring b;$/;"	m	struct:sbstr	file:
b	bstrlib.c	/^	bstring b;$/;"	m	struct:genBstrList	file:
b	robstest.c	/^	bstring b;$/;"	m	struct:tagBss	file:
b	robstest.c	/^    bstring b;$/;"	m	struct:sbstr	file:
b64ETable	bstraux.c	/^static char b64ETable[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";$/;"	v	file:
bAscTime	bstraux.h	58;"	d
bAssign	bstraux.h	31;"	d
bBase64Decode	bstraux.h	44;"	d
bBase64DecodeEx	bstraux.c	/^bstring bBase64DecodeEx (const_bstring b, int * boolTruncError) {$/;"	f
bBase64Encode	bstraux.c	/^bstring bBase64Encode (const_bstring b) {$/;"	f
bBlockCopy	bstrlib.c	66;"	d	file:
bCTime	bstraux.h	59;"	d
bCaselessCmp	bstraux.h	42;"	d
bCaselessNCmp	bstraux.h	43;"	d
bCatBlk	bstraux.h	36;"	d
bCatCstr	bstraux.h	35;"	d
bCatStatic	bstraux.h	37;"	d
bFill	bstraux.c	/^int bFill (bstring b, char c, int len) {$/;"	f
bHead	bstraux.c	/^bstring bHead (bstring b, int n) {$/;"	f
bInsertChrs	bstraux.c	/^int bInsertChrs (bstring b, int pos, int len, unsigned char c, unsigned char fill) {$/;"	f
bJustifyCenter	bstraux.c	/^int bJustifyCenter (bstring b, int width, int space) {$/;"	f
bJustifyLeft	bstraux.c	/^int bJustifyLeft (bstring b, int space) {$/;"	f
bJustifyMargin	bstraux.c	/^int bJustifyMargin (bstring b, int width, int space) {$/;"	f
bJustifyRight	bstraux.c	/^int bJustifyRight (bstring b, int width, int space) {$/;"	f
bLowercase	bstraux.h	41;"	d
bNetStr2Bstr	bstraux.c	/^bstring bNetStr2Bstr (const char * buff) {$/;"	f
bNgetc	bstrlib.h	/^typedef int (*bNgetc) (void *parm);$/;"	t
bNread	bstrlib.h	/^typedef size_t (* bNread) (void *buff, size_t elsize, size_t nelem, void *parm);$/;"	t
bNwrite	bstraux.h	/^typedef int (* bNwrite) (const void * buf, size_t elsize, size_t nelem, void * parm);$/;"	t
bReplaceAll	bstraux.h	39;"	d
bReplicate	bstraux.c	/^int bReplicate (bstring b, int n) {$/;"	f
bReverse	bstraux.c	/^int bReverse (bstring b) {$/;"	f
bSecureDestroy	bstraux.h	90;"	d
bSecureInput	bstraux.c	/^bstring bSecureInput (int maxlen, int termchar, bNgetc vgetchar, void * vgcCtx) {$/;"	f
bSecureWriteProtect	bstraux.h	97;"	d
bSetChar	bstraux.c	/^int bSetChar (bstring b, int pos, char c) {$/;"	f
bSetCstrChar	bstraux.c	/^int bSetCstrChar (bstring b, int pos, char c) {$/;"	f
bStr2NetStr	bstraux.c	/^char * bStr2NetStr (const_bstring b) {$/;"	f
bStrchr	bstraux.h	33;"	d
bStrchrFast	bstraux.h	34;"	d
bStream	bstrlib.c	/^struct bStream {$/;"	s	file:
bStrfTime	bstraux.c	/^bstring bStrfTime (const char * fmt, const struct tm * timeptr) {$/;"	f
bSubs	bstraux.h	32;"	d
bTail	bstraux.c	/^bstring bTail (bstring b, int n) {$/;"	f
bTrunc	bstraux.h	38;"	d
bUppercase	bstraux.h	40;"	d
bUuDecLine	bstraux.c	/^static int bUuDecLine (void * parm, int ofs, int len) {$/;"	f	file:
bUuDecode	bstraux.h	45;"	d
bUuDecodeEx	bstraux.c	/^bstring bUuDecodeEx (const_bstring src, int * badlines) {$/;"	f
bUuEncode	bstraux.c	/^bstring bUuEncode (const_bstring src) {$/;"	f
bUuInOut	bstraux.c	/^struct bUuInOut {$/;"	s	file:
bYDecode	bstraux.c	/^bstring bYDecode (const_bstring src) {$/;"	f
bYEncode	bstraux.c	/^bstring bYEncode (const_bstring src) {$/;"	f
badBstring1	bstest.c	/^struct tagbstring badBstring1 = {8,  4, NULL};$/;"	v	typeref:struct:tagbstring
badBstring1	robstest.c	/^struct tagbstring badBstring1 = {8,  4, NULL};$/;"	v	typeref:struct:tagbstring
badBstring2	bstest.c	/^struct tagbstring badBstring2 = {2, -5, (unsigned char *) "bogus"};$/;"	v	typeref:struct:tagbstring
badBstring2	robstest.c	/^struct tagbstring badBstring2 = {2, -5, (unsigned char *) "bogus"};$/;"	v	typeref:struct:tagbstring
badBstring3	bstest.c	/^struct tagbstring badBstring3 = {2,  5, (unsigned char *) "bogus"};$/;"	v	typeref:struct:tagbstring
badBstring3	robstest.c	/^struct tagbstring badBstring3 = {2,  5, (unsigned char *) "bogus"};$/;"	v	typeref:struct:tagbstring
badlines	bstraux.c	/^	int * badlines;$/;"	m	struct:bUuInOut	file:
balloc	bstrlib.c	/^int balloc (bstring b, int olen) {$/;"	f
ballocmin	bstrlib.c	/^int ballocmin (bstring b, int len) {$/;"	f
base	testaux.c	/^	bstring base;$/;"	m	struct:vfgetc	file:
base64DecodeSymbol	bstraux.c	/^static int base64DecodeSymbol (unsigned char alpha) {$/;"	f	file:
bassign	bstrlib.c	/^int bassign (bstring a, const_bstring b) {$/;"	f
bassignblk	bstrlib.c	/^int bassignblk (bstring a, const void * s, int len) {$/;"	f
bassigncstr	bstrlib.c	/^int bassigncstr (bstring a, const char * str) {$/;"	f
bassignformat	bstrlib.c	/^int bassignformat (bstring b, const char * fmt, ...) {$/;"	f
bassigngets	bstrlib.c	/^int bassigngets (bstring b, bNgetc getcPtr, void * parm, char terminator) {$/;"	f
bassignmidstr	bstrlib.c	/^int bassignmidstr (bstring a, const_bstring b, int left, int len) {$/;"	f
bcatblk	bstrlib.c	/^int bcatblk (bstring b, const void * s, int len) {$/;"	f
bcatcstr	bstrlib.c	/^int bcatcstr (bstring b, const char * s) {$/;"	f
bchar	bstrlib.h	201;"	d
bchare	bstrlib.h	200;"	d
bconcat	bstrlib.c	/^int bconcat (bstring b0, const_bstring b1) {$/;"	f
bconchar	bstrlib.c	/^int bconchar (bstring b, char c) {$/;"	f
bcstrfree	bstrlib.c	/^int bcstrfree (char * s) {$/;"	f
bdata	bstrlib.h	199;"	d
bdatae	bstrlib.h	198;"	d
bdataofs	bstrlib.h	197;"	d
bdataofse	bstrlib.h	196;"	d
bdelete	bstrlib.c	/^int bdelete (bstring b, int pos, int len) {$/;"	f
bdestroy	bstrlib.c	/^int bdestroy (bstring b) {$/;"	f
bfindreplace	bstrlib.c	/^int bfindreplace (bstring b, const_bstring find, const_bstring repl, int pos) {$/;"	f
bfindreplacecaseless	bstrlib.c	/^int bfindreplacecaseless (bstring b, const_bstring find, const_bstring repl, int pos) {$/;"	f
bformat	bstrlib.c	/^bstring bformat (const char * fmt, ...) {$/;"	f
bformata	bstrlib.c	/^int bformata (bstring b, const char * fmt, ...) {$/;"	f
bfromcstr	bstrlib.c	/^bstring bfromcstr (const char * str) {$/;"	f
bfromcstralloc	bstrlib.c	/^bstring bfromcstralloc (int mlen, const char * str) {$/;"	f
bgets	bstrlib.c	/^bstring bgets (bNgetc getcPtr, void * parm, char terminator) {$/;"	f
bgetsa	bstrlib.c	/^int bgetsa (bstring b, bNgetc getcPtr, void * parm, char terminator) {$/;"	f
binchr	bstrlib.c	/^int binchr (const_bstring b0, int pos, const_bstring b1) {$/;"	f
binchrCF	bstrlib.c	/^static int binchrCF (const unsigned char * data, int len, int pos, const struct charField * cf) {$/;"	f	file:
binchrr	bstrlib.c	/^int binchrr (const_bstring b0, int pos, const_bstring b1) {$/;"	f
binchrrCF	bstrlib.c	/^static int binchrrCF (const unsigned char * data, int pos, const struct charField * cf) {$/;"	f	file:
binsert	bstrlib.c	/^int binsert (bstring b1, int pos, const_bstring b2, unsigned char fill) {$/;"	f
binsertch	bstrlib.c	/^int binsertch (bstring b, int pos, int len, unsigned char fill) {$/;"	f
binstr	bstrlib.c	/^int binstr (const_bstring b1, int pos, const_bstring b2) {$/;"	f
binstrcaseless	bstrlib.c	/^int binstrcaseless (const_bstring b1, int pos, const_bstring b2) {$/;"	f
binstrr	bstrlib.c	/^int binstrr (const_bstring b1, int pos, const_bstring b2) {$/;"	f
binstrrcaseless	bstrlib.c	/^int binstrrcaseless (const_bstring b1, int pos, const_bstring b2) {$/;"	f
biseq	bstrlib.c	/^int biseq (const_bstring b0, const_bstring b1) {$/;"	f
biseqcaseless	bstrlib.c	/^int biseqcaseless (const_bstring b0, const_bstring b1) {$/;"	f
biseqcstr	bstrlib.c	/^int biseqcstr (const_bstring b, const char * s) {$/;"	f
biseqcstrcaseless	bstrlib.c	/^int biseqcstrcaseless (const_bstring b, const char * s) {$/;"	f
bisstemeqblk	bstrlib.c	/^int bisstemeqblk (const_bstring b0, const void * blk, int len) {$/;"	f
bisstemeqcaselessblk	bstrlib.c	/^int bisstemeqcaselessblk (const_bstring b0, const void * blk, int len) {$/;"	f
biswriteprotected	bstrlib.h	295;"	d
bjoin	bstrlib.c	/^bstring bjoin (const struct bstrList * bl, const_bstring sep) {$/;"	f
bl	bstrlib.c	/^	struct bstrList * bl;$/;"	m	struct:genBstrList	typeref:struct:genBstrList::bstrList	file:
blength	bstrlib.h	195;"	d
blengthe	bstrlib.h	194;"	d
blk2bstr	bstrlib.c	/^bstring blk2bstr (const void * blk, int len) {$/;"	f
blk2tbstr	bstrlib.h	222;"	d
bltrimws	bstrlib.c	/^int bltrimws (bstring b) {$/;"	f
bmid2tbstr	bstrlib.h	228;"	d
bmidstr	bstrlib.c	/^bstring bmidstr (const_bstring b, int left, int len) {$/;"	f
bninchr	bstrlib.c	/^int bninchr (const_bstring b0, int pos, const_bstring b1) {$/;"	f
bninchrr	bstrlib.c	/^int bninchrr (const_bstring b0, int pos, const_bstring b1) {$/;"	f
bpattern	bstrlib.c	/^int bpattern (bstring b, int len) {$/;"	f
bread	bstrlib.c	/^bstring bread (bNread readPtr, void * parm) {$/;"	f
breada	bstrlib.c	/^int breada (bstring b, bNread readPtr, void * parm) {$/;"	f
breplace	bstrlib.c	/^int breplace (bstring b1, int pos, int len, const_bstring b2,$/;"	f
brtrimws	bstrlib.c	/^int brtrimws (bstring b) {$/;"	f
bsFromBstr	bstraux.c	/^struct bStream * bsFromBstr (const_bstring b) {$/;"	f
bsFromBstrRef	bstraux.c	/^static struct bStream * bsFromBstrRef (struct tagbstring * t) {$/;"	f	file:
bsStatic	bstrlib.h	206;"	d
bsStatic	bstrlib.h	209;"	d
bsStaticBlkParms	bstrlib.h	213;"	d
bsStaticMlen	bstrlib.h	204;"	d
bsUuCtx	bstraux.c	/^struct bsUuCtx {$/;"	s	file:
bsUuDecode	bstraux.c	/^struct bStream * bsUuDecode (struct bStream * sInp, int * badlines) {$/;"	f
bsUuDecodePart	bstraux.c	/^static size_t bsUuDecodePart (void *buff, size_t elsize, size_t nelem, void *parm) {$/;"	f	file:
bsafeShouldExit	bsafe.c	/^static int bsafeShouldExit = 1;$/;"	v	file:
bsbufflength	bstrlib.c	/^int bsbufflength (struct bStream * s, int sz) {$/;"	f
bscb	bstrlib.c	/^static int bscb (void * parm, int ofs, int len) {$/;"	f	file:
bsclose	bstrlib.c	/^void * bsclose (struct bStream * s) {$/;"	f
bseof	bstrlib.c	/^int bseof (const struct bStream * s) {$/;"	f
bsetstr	bstrlib.c	/^int bsetstr (bstring b0, int pos, const_bstring b1, unsigned char fill) {$/;"	f
bsopen	bstrlib.c	/^struct bStream * bsopen (bNread readPtr, void * parm) {$/;"	f
bspeek	bstrlib.c	/^int bspeek (bstring r, const struct bStream * s) {$/;"	f
bsplit	bstrlib.c	/^struct bstrList * bsplit (const_bstring str, unsigned char splitChar) {$/;"	f
bsplitcb	bstrlib.c	/^int bsplitcb (const_bstring str, unsigned char splitChar, int pos,$/;"	f
bsplits	bstrlib.c	/^struct bstrList * bsplits (const_bstring str, const_bstring splitStr) {$/;"	f
bsplitscb	bstrlib.c	/^int bsplitscb (const_bstring str, const_bstring splitStr, int pos,$/;"	f
bsplitstr	bstrlib.c	/^struct bstrList * bsplitstr (const_bstring str, const_bstring splitStr) {$/;"	f
bsplitstrcb	bstrlib.c	/^int bsplitstrcb (const_bstring str, const_bstring splitStr, int pos,$/;"	f
bsread	bstrlib.c	/^int bsread (bstring r, struct bStream * s, int n) {$/;"	f
bsreada	bstrlib.c	/^int bsreada (bstring r, struct bStream * s, int n) {$/;"	f
bsreadln	bstrlib.c	/^int bsreadln (bstring r, struct bStream * s, char terminator) {$/;"	f
bsreadlna	bstrlib.c	/^int bsreadlna (bstring r, struct bStream * s, char terminator) {$/;"	f
bsreadlns	bstrlib.c	/^int bsreadlns (bstring r, struct bStream * s, const_bstring term) {$/;"	f
bsreadlnsa	bstrlib.c	/^int bsreadlnsa (bstring r, struct bStream * s, const_bstring term) {$/;"	f
bssplitscb	bstrlib.c	/^int bssplitscb (struct bStream * s, const_bstring splitStr,$/;"	f
bssplitstrcb	bstrlib.c	/^int bssplitstrcb (struct bStream * s, const_bstring splitStr,$/;"	f
bstr2cstr	bstrlib.c	/^char * bstr2cstr (const_bstring b, char z) {$/;"	f
bstrDeclare	bstraux.h	27;"	d
bstrFree	bstraux.h	28;"	d
bstrList	bstrlib.h	/^struct bstrList {$/;"	s
bstrListAlloc	bstrlib.c	/^int bstrListAlloc (struct bstrList * sl, int msz) {$/;"	f
bstrListAllocMin	bstrlib.c	/^int bstrListAllocMin (struct bstrList * sl, int msz) {$/;"	f
bstrListCreate	bstrlib.c	/^struct bstrList * bstrListCreate (void) {$/;"	f
bstrListDestroy	bstrlib.c	/^int bstrListDestroy (struct bstrList * sl) {$/;"	f
bstr__alloc	bstrlib.c	33;"	d	file:
bstr__alloc	bstrwrap.cpp	30;"	d	file:
bstr__free	bstrlib.c	37;"	d	file:
bstr__free	bstrwrap.cpp	34;"	d	file:
bstr__memchr	bstrlib.c	61;"	d	file:
bstr__memchr	bstrwrap.cpp	58;"	d	file:
bstr__memcmp	bstrlib.c	57;"	d	file:
bstr__memcmp	bstrwrap.cpp	54;"	d	file:
bstr__memcpy	bstrlib.c	45;"	d	file:
bstr__memcpy	bstrwrap.cpp	42;"	d	file:
bstr__memmove	bstrlib.c	49;"	d	file:
bstr__memmove	bstrwrap.cpp	46;"	d	file:
bstr__memset	bstrlib.c	53;"	d	file:
bstr__memset	bstrwrap.cpp	50;"	d	file:
bstr__realloc	bstrlib.c	41;"	d	file:
bstr__realloc	bstrwrap.cpp	38;"	d	file:
bstrchr	bstrlib.h	91;"	d
bstrchrp	bstrlib.c	/^int bstrchrp (const_bstring b, int c, int pos) {$/;"	f
bstrcmp	bstrlib.c	/^int bstrcmp (const_bstring b0, const_bstring b1) {$/;"	f
bstrcpy	bstrlib.c	/^bstring bstrcpy (const_bstring b) {$/;"	f
bstricmp	bstrlib.c	/^int bstricmp (const_bstring b0, const_bstring b1) {$/;"	f
bstring	bstrlib.h	/^typedef struct tagbstring * bstring;$/;"	t	typeref:struct:tagbstring
bstringThrow	bstrwrap.h	117;"	d
bstrncmp	bstrlib.c	/^int bstrncmp (const_bstring b0, const_bstring b1, int n) {$/;"	f
bstrnicmp	bstrlib.c	/^int bstrnicmp (const_bstring b0, const_bstring b1, int n) {$/;"	f
bstrrchr	bstrlib.h	92;"	d
bstrrchrp	bstrlib.c	/^int bstrrchrp (const_bstring b, int c, int pos) {$/;"	f
bsunread	bstrlib.c	/^int bsunread (struct bStream * s, const_bstring b) {$/;"	f
btfromblk	bstrlib.h	227;"	d
btfromblkltrimws	bstrlib.h	252;"	d
btfromblkrtrimws	bstrlib.h	264;"	d
btfromblktrimws	bstrlib.h	276;"	d
btfromcstr	bstrlib.h	217;"	d
btolower	bstrlib.c	/^int btolower (bstring b) {$/;"	f
btoupper	bstrlib.c	/^int btoupper (bstring b) {$/;"	f
btrimws	bstrlib.c	/^int btrimws (bstring b) {$/;"	f
btrunc	bstrlib.c	/^int btrunc (bstring b, int n) {$/;"	f
buff	bstraux.c	/^    bstring buff;    \/* Buffer for underwrites                   *\/$/;"	m	struct:bwriteStream	file:
buff	bstrlib.c	/^	bstring buff;		\/* Buffer for over-reads *\/$/;"	m	struct:bStream	file:
buffLengthGet	bstrwrap.cpp	/^int CBStream::buffLengthGet () {$/;"	f	class:Bstrlib::CBStream
buffLengthSet	bstrwrap.cpp	/^int CBStream::buffLengthSet (int sz) {$/;"	f	class:Bstrlib::CBStream
buildCharField	bstrlib.c	/^static int buildCharField (struct charField * cf, const_bstring b) {$/;"	f	file:
bvcformata	bstrlib.c	/^int bvcformata (bstring b, int count, const char * fmt, va_list arg) {$/;"	f
bvformata	bstrlib.h	136;"	d
bwriteStream	bstraux.c	/^struct bwriteStream {$/;"	s	file:
bwriteallow	bstrlib.h	294;"	d
bwriteprotect	bstrlib.h	293;"	d
bwsBuffLength	bstraux.c	/^int bwsBuffLength (struct bwriteStream * ws, int sz) {$/;"	f
bwsClose	bstraux.c	/^void * bwsClose (struct bwriteStream * ws) {$/;"	f
bwsIsEOF	bstraux.c	/^int bwsIsEOF (const struct bwriteStream * ws) {$/;"	f
bwsOpen	bstraux.c	/^struct bwriteStream * bwsOpen (bNwrite writeFn, void * parm) {$/;"	f
bwsWriteBlk	bstraux.c	/^int bwsWriteBlk (struct bwriteStream * ws, void * blk, int len) {$/;"	f
bwsWriteBstr	bstraux.c	/^int bwsWriteBstr (struct bwriteStream * ws, const_bstring b) {$/;"	f
bwsWriteFlush	bstraux.c	/^int bwsWriteFlush (struct bwriteStream * ws) {$/;"	f
caselessCmp	bstrwrap.cpp	/^int CBString::caselessCmp (const CBString& b) const {$/;"	f	class:Bstrlib::CBString
caselessEqual	bstrwrap.cpp	/^int CBString::caselessEqual (const CBString& b) const {$/;"	f	class:Bstrlib::CBString
caselessfind	bstrwrap.cpp	/^int CBString::caselessfind (const CBString& b, int pos) const {$/;"	f	class:Bstrlib::CBString
caselessfind	bstrwrap.cpp	/^int CBString::caselessfind (const char * b, int pos) const {$/;"	f	class:Bstrlib::CBString
caselessreversefind	bstrwrap.cpp	/^int CBString::caselessreversefind (const CBString& b, int pos) const {$/;"	f	class:Bstrlib::CBString
caselessreversefind	bstrwrap.cpp	/^int CBString::caselessreversefind (const char * b, int pos) const {$/;"	f	class:Bstrlib::CBString
charField	bstrlib.c	/^struct charField { LONG_TYPE content[CFCLEN]; };$/;"	s	file:
charField	bstrlib.c	/^struct charField { unsigned char content[CFCLEN]; };$/;"	s	file:
character	bstrwrap.h	/^	inline CBCharWriteProtected character (int i) {$/;"	f	struct:Bstrlib::CBString
character	bstrwrap.h	/^	inline unsigned char character (int i) const {$/;"	f	struct:Bstrlib::CBString
const_bstring	bstrlib.h	/^typedef const struct tagbstring * const_bstring;$/;"	t	typeref:struct:tagbstring
content	bstrlib.c	/^struct charField { LONG_TYPE content[CFCLEN]; };$/;"	m	struct:charField	file:
content	bstrlib.c	/^struct charField { unsigned char content[CFCLEN]; };$/;"	m	struct:charField	file:
contents	bstest.c	/^	bstring contents;$/;"	m	struct:emuFile	file:
contents	robstest.c	/^	bstring contents;$/;"	m	struct:emuFile	file:
cstr2bstr	bstrlib.h	40;"	d
cstr2tbstr	bstrlib.h	216;"	d
data	bstrlib.h	/^	unsigned char * data;$/;"	m	struct:tagbstring
downcase	bstrlib.c	559;"	d	file:
dst	bstraux.c	/^	bstring src, dst;$/;"	m	struct:bUuInOut	file:
dumpBstring	bstest.c	/^static char * dumpBstring (const struct tagbstring * b) {$/;"	f	file:
dumpBstring	robstest.c	/^static char * dumpBstring (const struct tagbstring * b) {$/;"	f	file:
dumpBstring	test.cpp	/^char * dumpBstring (const bstring b) {$/;"	f
dumpOut	bstest.c	/^static bstring dumpOut[16];$/;"	v	file:
dumpOut	robstest.c	/^static bstring dumpOut[16];$/;"	v	file:
dumpOut	test.cpp	/^static bstring dumpOut[dumpOutQty];$/;"	v	file:
dumpOutQty	test.cpp	22;"	d	file:
emptyBstring	bstest.c	/^struct tagbstring emptyBstring = bsStatic ("");$/;"	v	typeref:struct:tagbstring
emptyBstring	robstest.c	/^struct tagbstring emptyBstring = bsStatic ("");$/;"	v	typeref:struct:tagbstring
emuFile	bstest.c	/^struct emuFile {$/;"	s	file:
emuFile	robstest.c	/^struct emuFile {$/;"	s	file:
entry	bstrlib.h	/^    bstring * entry;$/;"	m	struct:bstrList
eof	bstrwrap.cpp	/^int CBStream::eof () const {$/;"	f	class:Bstrlib::CBStream
exvsnprintf	bstrlib.c	2749;"	d	file:
exvsnprintf	bstrlib.c	2754;"	d	file:
exvsnprintf	bstrlib.c	2764;"	d	file:
exvsnprintf	bstrwrap.cpp	535;"	d	file:
exvsnprintf	bstrwrap.cpp	540;"	d	file:
exvsnprintf	bstrwrap.cpp	552;"	d	file:
fill	bstrwrap.cpp	/^void CBString::fill (int len, unsigned char cfill) {$/;"	f	class:Bstrlib::CBString
find	bstrwrap.cpp	/^int CBString::find (char c, int pos) const {$/;"	f	class:Bstrlib::CBString
find	bstrwrap.cpp	/^int CBString::find (const CBString& b, int pos) const {$/;"	f	class:Bstrlib::CBString
find	bstrwrap.cpp	/^int CBString::find (const char * b, int pos) const {$/;"	f	class:Bstrlib::CBString
findchr	bstrwrap.cpp	/^int CBString::findchr (const CBString& b, int pos) const {$/;"	f	class:Bstrlib::CBString
findchr	bstrwrap.cpp	/^int CBString::findchr (const char * s, int pos) const {$/;"	f	class:Bstrlib::CBString
findreplace	bstrwrap.cpp	/^void CBString::findreplace (const CBString& sfind, const CBString& repl, int pos) {$/;"	f	class:Bstrlib::CBString
findreplace	bstrwrap.cpp	/^void CBString::findreplace (const CBString& sfind, const char * repl, int pos) {$/;"	f	class:Bstrlib::CBString
findreplace	bstrwrap.cpp	/^void CBString::findreplace (const char * sfind, const CBString& repl, int pos) {$/;"	f	class:Bstrlib::CBString
findreplace	bstrwrap.cpp	/^void CBString::findreplace (const char * sfind, const char * repl, int pos) {$/;"	f	class:Bstrlib::CBString
findreplacecaseless	bstrwrap.cpp	/^void CBString::findreplacecaseless (const CBString& sfind, const CBString& repl, int pos) {$/;"	f	class:Bstrlib::CBString
findreplacecaseless	bstrwrap.cpp	/^void CBString::findreplacecaseless (const CBString& sfind, const char * repl, int pos) {$/;"	f	class:Bstrlib::CBString
findreplacecaseless	bstrwrap.cpp	/^void CBString::findreplacecaseless (const char * sfind, const CBString& repl, int pos) {$/;"	f	class:Bstrlib::CBString
findreplacecaseless	bstrwrap.cpp	/^void CBString::findreplacecaseless (const char * sfind, const char * repl, int pos) {$/;"	f	class:Bstrlib::CBString
findreplaceengine	bstrlib.c	/^static int findreplaceengine (bstring b, const_bstring find, const_bstring repl, int pos, instr_fnptr instr) {$/;"	f	file:
first	bstest.c	/^	int first;$/;"	m	struct:tagBss	file:
first	robstest.c	/^	int first;$/;"	m	struct:tagBss	file:
format	bstrwrap.cpp	/^void CBString::format (const char * fmt, ...) {$/;"	f	class:Bstrlib::CBString
formata	bstrwrap.cpp	/^void CBString::formata (const char * fmt, ...) {$/;"	f	class:Bstrlib::CBString
genBstrList	bstrlib.c	/^struct genBstrList {$/;"	s	file:
getline	bstrwrap.cpp	/^std::istream& getline (std::istream& sin, CBString& b, char terminator) {$/;"	f	namespace:Bstrlib
gets	bsafe.c	/^char * (gets) (char * buf) {$/;"	f
gets	bstrwrap.cpp	/^int CBString::gets (bNgetc getcPtr, void * parm, char terminator) {$/;"	f	class:Bstrlib::CBString
idx	bstrwrap.h	/^	unsigned int idx;$/;"	m	class:Bstrlib::CBCharWriteProtected
insert	bstrwrap.cpp	/^void CBString::insert (int pos, const CBString& b, unsigned char cfill) {$/;"	f	class:Bstrlib::CBString
insert	bstrwrap.cpp	/^void CBString::insert (int pos, const char * s, unsigned char cfill) {$/;"	f	class:Bstrlib::CBString
insertchrs	bstrwrap.cpp	/^void CBString::insertchrs (int pos, int len, unsigned char cfill) {$/;"	f	class:Bstrlib::CBString
instr_fnptr	bstrlib.c	/^typedef int (*instr_fnptr) (const_bstring s1, int pos, const_bstring s2);$/;"	t	file:
internal_bwswriteout	bstraux.c	1014;"	d	file:
invertCharField	bstrlib.c	/^static void invertCharField (struct charField * cf) {$/;"	f	file:
io	bstraux.c	/^	struct bUuInOut io;$/;"	m	struct:bsUuCtx	typeref:struct:bsUuCtx::bUuInOut	file:
isEOF	bstraux.c	/^    int isEOF;       \/* track stream's EOF state                 *\/$/;"	m	struct:bwriteStream	file:
isEOF	bstrlib.c	/^	int isEOF;		\/* track file's EOF state *\/$/;"	m	struct:bStream	file:
istreamGetc	bstrwrap.cpp	/^static int istreamGetc (void * parm) {$/;"	f	namespace:Bstrlib
istreamGets	bstrwrap.cpp	/^static int istreamGets (void * parm) {$/;"	f	namespace:Bstrlib
iswriteprotected	bstrwrap.h	/^	inline bool iswriteprotected () const { return mlen <= 0; }$/;"	f	struct:Bstrlib::CBString
join	bstrwrap.cpp	/^void CBString::join (const struct CBStringList& l) {$/;"	f	class:Bstrlib::CBString
join	bstrwrap.cpp	/^void CBString::join (const struct CBStringList& l, char sep) {$/;"	f	class:Bstrlib::CBString
join	bstrwrap.cpp	/^void CBString::join (const struct CBStringList& l, const CBString& sep) {$/;"	f	class:Bstrlib::CBString
join	bstrwrap.cpp	/^void CBString::join (const struct CBStringList& l, unsigned char sep) {$/;"	f	class:Bstrlib::CBString
length	bstrwrap.h	/^	inline int length () const {return slen;}$/;"	f	struct:Bstrlib::CBString
longBstring	bstest.c	/^struct tagbstring longBstring  = bsStatic ("This is a bogus but reasonably long string.  Just long enough to cause some mallocing.");$/;"	v	typeref:struct:tagbstring
longBstring	robstest.c	/^struct tagbstring longBstring  = bsStatic ("This is a bogus but reasonably long string.  Just long enough to cause some mallocing.");$/;"	v	typeref:struct:tagbstring
ltrim	bstrwrap.cpp	/^void CBString::ltrim (const CBString& b) {$/;"	f	class:Bstrlib::CBString
m_s	bstrwrap.h	/^	struct bStream * m_s;$/;"	m	struct:Bstrlib::CBStream	typeref:struct:Bstrlib::CBStream::bStream
main	bstest.c	/^int main (int argc, char * argv[]) {$/;"	f
main	robstest.c	/^int main (int argc, char * argv[]) {$/;"	f
main	test.cpp	/^int main () {$/;"	f
main	testaux.c	/^int main () {$/;"	f
maxBuffSz	bstrlib.c	/^	int maxBuffSz;$/;"	m	struct:bStream	file:
midstr	bstrwrap.cpp	/^const CBString CBString::midstr (int left, int len) const {$/;"	f	class:Bstrlib::CBString
minBuffSz	bstraux.c	/^    int minBuffSz;$/;"	m	struct:bwriteStream	file:
mlen	bstrlib.h	/^	int mlen;$/;"	m	struct:tagbstring
mlen	bstrlib.h	/^    int qty, mlen;$/;"	m	struct:bstrList
msg	bstrwrap.h	/^	std::string msg;$/;"	m	struct:Bstrlib::CBStringException
nfindchr	bstrwrap.cpp	/^int CBString::nfindchr (const CBString& b, int pos) const {$/;"	f	class:Bstrlib::CBString
nfindchr	bstrwrap.cpp	/^int CBString::nfindchr (const char * s, int pos) const {$/;"	f	class:Bstrlib::CBString
nreversefindchr	bstrwrap.cpp	/^int CBString::nreversefindchr (const CBString& b, int pos) const {$/;"	f	class:Bstrlib::CBString
nreversefindchr	bstrwrap.cpp	/^int CBString::nreversefindchr (const char * s, int pos) const {$/;"	f	class:Bstrlib::CBString
ofs	bstest.c	/^	int ofs;$/;"	m	struct:emuFile	file:
ofs	bstest.c	/^    int ofs;$/;"	m	struct:sbstr	file:
ofs	robstest.c	/^	int ofs;$/;"	m	struct:emuFile	file:
ofs	robstest.c	/^    int ofs;$/;"	m	struct:sbstr	file:
ofs	testaux.c	/^	int ofs;$/;"	m	struct:vfgetc	file:
operator !=	bstrwrap.cpp	/^bool CBString::operator != (const CBString& b) const {$/;"	f	class:Bstrlib::CBString
operator !=	bstrwrap.cpp	/^bool CBString::operator != (const char * s) const {$/;"	f	class:Bstrlib::CBString
operator !=	bstrwrap.cpp	/^bool CBString::operator != (const unsigned char * s) const {$/;"	f	class:Bstrlib::CBString
operator *	bstrwrap.h	/^	inline const CBString operator * (int count) const {$/;"	f	struct:Bstrlib::CBString
operator *	bstrwrap.h	/^inline const CBString operator * (int count, const CBString& b) {$/;"	f	namespace:Bstrlib
operator *=	bstrwrap.h	/^	inline const CBString& operator *= (int count) {$/;"	f	struct:Bstrlib::CBString
operator +	bstrwrap.cpp	/^const CBString CBString::operator + (char c) const {$/;"	f	class:Bstrlib::CBString
operator +	bstrwrap.cpp	/^const CBString CBString::operator + (const CBString& b) const {$/;"	f	class:Bstrlib::CBString
operator +	bstrwrap.cpp	/^const CBString CBString::operator + (const char *s) const {$/;"	f	class:Bstrlib::CBString
operator +	bstrwrap.cpp	/^const CBString CBString::operator + (const tagbstring& x) const {$/;"	f	class:Bstrlib::CBString
operator +	bstrwrap.cpp	/^const CBString CBString::operator + (const unsigned char *s) const {$/;"	f	class:Bstrlib::CBString
operator +	bstrwrap.cpp	/^const CBString CBString::operator + (unsigned char c) const {$/;"	f	class:Bstrlib::CBString
operator +	bstrwrap.cpp	/^const CBString operator + (char c, const CBString& b) {$/;"	f	namespace:Bstrlib
operator +	bstrwrap.cpp	/^const CBString operator + (const char *a, const CBString& b) {$/;"	f	namespace:Bstrlib
operator +	bstrwrap.cpp	/^const CBString operator + (const tagbstring& x, const CBString& b) {$/;"	f	namespace:Bstrlib
operator +	bstrwrap.cpp	/^const CBString operator + (const unsigned char *a, const CBString& b) {$/;"	f	namespace:Bstrlib
operator +	bstrwrap.cpp	/^const CBString operator + (unsigned char c, const CBString& b) {$/;"	f	namespace:Bstrlib
operator +=	bstrwrap.cpp	/^const CBString& CBString::operator += (char c) {$/;"	f	class:Bstrlib::CBString
operator +=	bstrwrap.cpp	/^const CBString& CBString::operator += (const CBString& b) {$/;"	f	class:Bstrlib::CBString
operator +=	bstrwrap.cpp	/^const CBString& CBString::operator += (const char *s) {$/;"	f	class:Bstrlib::CBString
operator +=	bstrwrap.cpp	/^const CBString& CBString::operator += (const tagbstring& x) {$/;"	f	class:Bstrlib::CBString
operator +=	bstrwrap.cpp	/^const CBString& CBString::operator += (unsigned char c) {$/;"	f	class:Bstrlib::CBString
operator <	bstrwrap.cpp	/^bool CBString::operator < (const CBString& b) const {$/;"	f	class:Bstrlib::CBString
operator <	bstrwrap.cpp	/^bool CBString::operator < (const char * s) const {$/;"	f	class:Bstrlib::CBString
operator <	bstrwrap.cpp	/^bool CBString::operator < (const unsigned char * s) const {$/;"	f	class:Bstrlib::CBString
operator <<	bstrwrap.cpp	/^std::ostream& operator << (std::ostream& sout, CBString b) {$/;"	f	namespace:Bstrlib
operator <<	bstrwrap.h	/^	inline CBStream& operator << (const CBString& s) {$/;"	f	struct:Bstrlib::CBStream
operator <=	bstrwrap.cpp	/^bool CBString::operator <= (const CBString& b) const {$/;"	f	class:Bstrlib::CBString
operator <=	bstrwrap.cpp	/^bool CBString::operator <= (const char * s) const {$/;"	f	class:Bstrlib::CBString
operator <=	bstrwrap.cpp	/^bool CBString::operator <= (const unsigned char * s) const {$/;"	f	class:Bstrlib::CBString
operator =	bstrwrap.cpp	/^const CBString& CBString::operator = (char c) {$/;"	f	class:Bstrlib::CBString
operator =	bstrwrap.cpp	/^const CBString& CBString::operator = (const CBString& b) {$/;"	f	class:Bstrlib::CBString
operator =	bstrwrap.cpp	/^const CBString& CBString::operator = (const char *s) {$/;"	f	class:Bstrlib::CBString
operator =	bstrwrap.cpp	/^const CBString& CBString::operator = (const tagbstring& x) {$/;"	f	class:Bstrlib::CBString
operator =	bstrwrap.cpp	/^const CBString& CBString::operator = (unsigned char c) {$/;"	f	class:Bstrlib::CBString
operator =	bstrwrap.h	/^	inline char operator = (char c) {$/;"	f	class:Bstrlib::CBCharWriteProtected
operator =	bstrwrap.h	/^	inline unsigned char operator = (unsigned char c) {$/;"	f	class:Bstrlib::CBCharWriteProtected
operator ==	bstrwrap.cpp	/^bool CBString::operator == (const CBString& b) const {$/;"	f	class:Bstrlib::CBString
operator ==	bstrwrap.cpp	/^bool CBString::operator == (const char * s) const {$/;"	f	class:Bstrlib::CBString
operator ==	bstrwrap.cpp	/^bool CBString::operator == (const unsigned char * s) const {$/;"	f	class:Bstrlib::CBString
operator >	bstrwrap.cpp	/^bool CBString::operator > (const CBString& b) const {$/;"	f	class:Bstrlib::CBString
operator >	bstrwrap.cpp	/^bool CBString::operator > (const char * s) const {$/;"	f	class:Bstrlib::CBString
operator >	bstrwrap.cpp	/^bool CBString::operator > (const unsigned char * s) const {$/;"	f	class:Bstrlib::CBString
operator >=	bstrwrap.cpp	/^bool CBString::operator >= (const CBString& b) const {$/;"	f	class:Bstrlib::CBString
operator >=	bstrwrap.cpp	/^bool CBString::operator >= (const char * s) const {$/;"	f	class:Bstrlib::CBString
operator >=	bstrwrap.cpp	/^bool CBString::operator >= (const unsigned char * s) const {$/;"	f	class:Bstrlib::CBString
operator >>	bstrwrap.cpp	/^CBString& CBStream::operator >> (CBString& s) {$/;"	f	class:Bstrlib::CBStream
operator >>	bstrwrap.cpp	/^std::istream& operator >> (std::istream& sin, CBString& b) {$/;"	f	namespace:Bstrlib
operator []	bstrwrap.h	/^	inline CBCharWriteProtected operator [] (int i) { return character(i); }$/;"	f	struct:Bstrlib::CBString
operator []	bstrwrap.h	/^	inline unsigned char operator [] (int i) const { return character(i); }$/;"	f	struct:Bstrlib::CBString
operator const char*	bstrwrap.h	/^	inline operator const char* () const { return (const char *)data; }$/;"	f	struct:Bstrlib::CBString
operator const unsigned char*	bstrwrap.h	/^	inline operator const unsigned char* () const { return (const unsigned char *)data; }$/;"	f	struct:Bstrlib::CBString
operator double	bstrwrap.cpp	/^CBString::operator double () const {$/;"	f	class:Bstrlib::CBString
operator float	bstrwrap.cpp	/^CBString::operator float () const {$/;"	f	class:Bstrlib::CBString
operator int	bstrwrap.cpp	/^CBString::operator int () const {$/;"	f	class:Bstrlib::CBString
operator unsigned char	bstrwrap.h	/^	inline operator unsigned char () const {$/;"	f	class:Bstrlib::CBCharWriteProtected
operator unsigned int	bstrwrap.cpp	/^CBString::operator unsigned int () const {$/;"	f	class:Bstrlib::CBString
parm	bstraux.c	/^    void * parm;     \/* The stream handle for core stream        *\/$/;"	m	struct:bwriteStream	file:
parm	bstrlib.c	/^	void * parm;		\/* The stream handle for core stream *\/$/;"	m	struct:bStream	file:
peek	bstrwrap.cpp	/^CBString CBStream::peek () const {$/;"	f	class:Bstrlib::CBStream
peek	bstrwrap.cpp	/^void CBStream::peek (CBString& s) const {$/;"	f	class:Bstrlib::CBStream
peekAppend	bstrwrap.cpp	/^void CBStream::peekAppend (CBString& s) const {$/;"	f	class:Bstrlib::CBStream
qty	bstrlib.h	/^    int qty, mlen;$/;"	m	struct:bstrList
read	bstrwrap.cpp	/^CBString CBStream::read () {$/;"	f	class:Bstrlib::CBStream
read	bstrwrap.cpp	/^CBString CBStream::read (int n) {$/;"	f	class:Bstrlib::CBStream
read	bstrwrap.cpp	/^int CBString::read (bNread readPtr, void * parm) {$/;"	f	class:Bstrlib::CBString
read	bstrwrap.cpp	/^void CBStream::read (CBString& s) {$/;"	f	class:Bstrlib::CBStream
read	bstrwrap.cpp	/^void CBStream::read (CBString& s, int n) {$/;"	f	class:Bstrlib::CBStream
readAppend	bstrwrap.cpp	/^void CBStream::readAppend (CBString& s) {$/;"	f	class:Bstrlib::CBStream
readAppend	bstrwrap.cpp	/^void CBStream::readAppend (CBString& s, int n) {$/;"	f	class:Bstrlib::CBStream
readFnPtr	bstrlib.c	/^	bNread readFnPtr;	\/* fread compatible fnptr for core stream *\/$/;"	m	struct:bStream	file:
readLine	bstrwrap.cpp	/^CBString CBStream::readLine (char terminator) {$/;"	f	class:Bstrlib::CBStream
readLine	bstrwrap.cpp	/^CBString CBStream::readLine (const CBString& terminator) {$/;"	f	class:Bstrlib::CBStream
readLine	bstrwrap.cpp	/^void CBStream::readLine (CBString& s, char terminator) {$/;"	f	class:Bstrlib::CBStream
readLine	bstrwrap.cpp	/^void CBStream::readLine (CBString& s, const CBString& terminator) {$/;"	f	class:Bstrlib::CBStream
readLineAppend	bstrwrap.cpp	/^void CBStream::readLineAppend (CBString& s, char terminator) {$/;"	f	class:Bstrlib::CBStream
readLineAppend	bstrwrap.cpp	/^void CBStream::readLineAppend (CBString& s, const CBString& terminator) {$/;"	f	class:Bstrlib::CBStream
readNothing	bstraux.c	/^static size_t readNothing (void *buff, size_t elsize, size_t nelem, void *parm) {$/;"	f	file:
readRef	bstraux.c	/^static size_t readRef (void *buff, size_t elsize, size_t nelem, void *parm) {$/;"	f	file:
remove	bstrwrap.cpp	/^void CBString::remove (int pos, int len) {$/;"	f	class:Bstrlib::CBString
repeat	bstrwrap.cpp	/^void CBString::repeat (int count) {$/;"	f	class:Bstrlib::CBString
replace	bstrwrap.cpp	/^void CBString::replace (int pos, int len, const CBString& b, unsigned char cfill) {$/;"	f	class:Bstrlib::CBString
replace	bstrwrap.cpp	/^void CBString::replace (int pos, int len, const char * s, unsigned char cfill) {$/;"	f	class:Bstrlib::CBString
reversefind	bstrwrap.cpp	/^int CBString::reversefind (char c, int pos) const {$/;"	f	class:Bstrlib::CBString
reversefind	bstrwrap.cpp	/^int CBString::reversefind (const CBString& b, int pos) const {$/;"	f	class:Bstrlib::CBString
reversefind	bstrwrap.cpp	/^int CBString::reversefind (const char * b, int pos) const {$/;"	f	class:Bstrlib::CBString
reversefindchr	bstrwrap.cpp	/^int CBString::reversefindchr (const CBString& b, int pos) const {$/;"	f	class:Bstrlib::CBString
reversefindchr	bstrwrap.cpp	/^int CBString::reversefindchr (const char * s, int pos) const {$/;"	f	class:Bstrlib::CBString
rot	bstest.c	/^static int rot = 0;$/;"	v	file:
rot	robstest.c	/^static int rot = 0;$/;"	v	file:
rot	test.cpp	/^static unsigned int rot = 0;$/;"	v	file:
rtrim	bstrwrap.cpp	/^void CBString::rtrim (const CBString& b) {$/;"	f	class:Bstrlib::CBString
s	bstrwrap.h	/^	const struct tagbstring& s;$/;"	m	class:Bstrlib::CBCharWriteProtected	typeref:struct:Bstrlib::CBCharWriteProtected::tagbstring
sInp	bstraux.c	/^	struct bStream * sInp;$/;"	m	struct:bsUuCtx	typeref:struct:bsUuCtx::bStream	file:
sbstr	bstest.c	/^struct sbstr {$/;"	s	file:
sbstr	robstest.c	/^struct sbstr {$/;"	s	file:
sc	bstest.c	/^	unsigned char sc;$/;"	m	struct:tagBss	file:
sc	robstest.c	/^	unsigned char sc;$/;"	m	struct:tagBss	file:
setInCharField	bstrlib.c	1280;"	d	file:
setInCharField	bstrlib.c	1290;"	d	file:
setsubstr	bstrwrap.cpp	/^void CBString::setsubstr (int pos, const CBString& b, unsigned char cfill) {$/;"	f	class:Bstrlib::CBString
setsubstr	bstrwrap.cpp	/^void CBString::setsubstr (int pos, const char * s, unsigned char cfill) {$/;"	f	class:Bstrlib::CBString
sgetc	bstrwrap.cpp	/^struct sgetc {$/;"	s	namespace:Bstrlib	file:
shortBstring	bstest.c	/^struct tagbstring shortBstring = bsStatic ("bogus");$/;"	v	typeref:struct:tagbstring
shortBstring	robstest.c	/^struct tagbstring shortBstring = bsStatic ("bogus");$/;"	v	typeref:struct:tagbstring
sin	bstrwrap.cpp	/^	std::istream * sin;$/;"	m	struct:Bstrlib::sgetc	file:
slen	bstrlib.h	/^	int slen;$/;"	m	struct:tagbstring
snapUpSize	bstrlib.c	/^static int snapUpSize (int i) {$/;"	f	file:
split	bstrwrap.cpp	/^void CBStringList::split (const CBStream& b, const CBString& s) {$/;"	f	class:Bstrlib::CBStringList
split	bstrwrap.cpp	/^void CBStringList::split (const CBStream& b, unsigned char splitChar) {$/;"	f	class:Bstrlib::CBStringList
split	bstrwrap.cpp	/^void CBStringList::split (const CBString& b, const CBString& s) {$/;"	f	class:Bstrlib::CBStringList
split	bstrwrap.cpp	/^void CBStringList::split (const CBString& b, unsigned char splitChar) {$/;"	f	class:Bstrlib::CBStringList
splitstr	bstrwrap.cpp	/^void CBStringList::splitstr (const CBStream& b, const CBString& s) {$/;"	f	class:Bstrlib::CBStringList
splitstr	bstrwrap.cpp	/^void CBStringList::splitstr (const CBString& b, const CBString& s) {$/;"	f	class:Bstrlib::CBStringList
src	bstraux.c	/^	bstring src, dst;$/;"	m	struct:bUuInOut	file:
strcat	bsafe.c	/^char * strcat (char *dst, const char *src) {$/;"	f
strcat	bsafe.h	35;"	d
strcat	bsafe.h	37;"	d
strcpy	bsafe.c	/^char * strcpy (char *dst, const char *src) {$/;"	f
strcpy	bsafe.h	34;"	d
strcpy	bsafe.h	36;"	d
strdup	bsafe.c	/^char * (strdup) (const char *s) {$/;"	f
streamSplitCb	bstrwrap.cpp	/^static int streamSplitCb (void * parm, int ofs, const_bstring entry) {$/;"	f	namespace:Bstrlib
strncat	bsafe.c	/^char * (strncat) (char *dst, const char *src, size_t n) {$/;"	f
strncpy	bsafe.c	/^char * (strncpy) (char *dst, const char *src, size_t n) {$/;"	f
strtok	bsafe.c	/^char * (strtok) (char *s1, const char *s2) {$/;"	f
tWrite	testaux.c	/^static int tWrite (const void * buf, size_t elsize, size_t nelem, void * parm) {$/;"	f	file:
tagBss	bstest.c	/^struct tagBss {$/;"	s	file:
tagBss	robstest.c	/^struct tagBss {$/;"	s	file:
tagbstring	bstrlib.h	/^struct tagbstring {$/;"	s
terminator	bstrwrap.cpp	/^	char terminator;$/;"	m	struct:Bstrlib::sgetc	file:
test0	bstest.c	/^static int test0 (void) {$/;"	f	file:
test0	robstest.c	/^static int test0 (void) {$/;"	f	file:
test0	test.cpp	/^int test0 (void) {$/;"	f
test0	testaux.c	/^int test0 (void) {$/;"	f
test0_0	bstest.c	/^static int test0_0 (const char * s, const char * res) {$/;"	f	file:
test0_0	robstest.c	/^static int test0_0 (const char * s, const char * res) {$/;"	f	file:
test0_1	bstest.c	/^static int test0_1 (const char * s, int len, const char * res) {$/;"	f	file:
test0_1	robstest.c	/^static int test0_1 (const char * s, int len, const char * res) {$/;"	f	file:
test1	bstest.c	/^static int test1 (void) {$/;"	f	file:
test1	robstest.c	/^static int test1 (void) {$/;"	f	file:
test1	test.cpp	/^int test1 (void) {$/;"	f
test1	testaux.c	/^int test1 (void) {$/;"	f
test10	bstest.c	/^static int test10 (void) {$/;"	f	file:
test10	robstest.c	/^static int test10 (void) {$/;"	f	file:
test10	test.cpp	/^int test10 (void) {$/;"	f
test10	testaux.c	/^int test10 (void) {$/;"	f
test10_0	bstest.c	/^static int test10_0 (bstring b, int res, int nochange) {$/;"	f	file:
test10_0	robstest.c	/^static int test10_0 (bstring b, int res, int nochange) {$/;"	f	file:
test11	bstest.c	/^static int test11 (void) {$/;"	f	file:
test11	robstest.c	/^static int test11 (void) {$/;"	f	file:
test11	test.cpp	/^int test11 (void) {$/;"	f
test11	testaux.c	/^int test11 (void) {$/;"	f
test11_0	bstest.c	/^static int test11_0 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test11_0	robstest.c	/^static int test11_0 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test11_1	bstest.c	/^static int test11_1 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test11_1	robstest.c	/^static int test11_1 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test12	bstest.c	/^static int test12 (void) {$/;"	f	file:
test12	robstest.c	/^static int test12 (void) {$/;"	f	file:
test12	test.cpp	/^int test12 (void) {$/;"	f
test12	testaux.c	/^int test12 (void) {$/;"	f
test12_0	bstest.c	/^static int test12_0 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test12_0	robstest.c	/^static int test12_0 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test12_1	bstest.c	/^static int test12_1 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test12_1	robstest.c	/^static int test12_1 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test13	bstest.c	/^static int test13 (void) {$/;"	f	file:
test13	robstest.c	/^static int test13 (void) {$/;"	f	file:
test13	test.cpp	/^int test13 (void) {$/;"	f
test13	testaux.c	/^int test13 (void) {$/;"	f
test13_0	bstest.c	/^static int test13_0 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test13_0	robstest.c	/^static int test13_0 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test13_fgetc	testaux.c	/^static int test13_fgetc (void * ctx) {$/;"	f	file:
test14	bstest.c	/^static int test14 (void) {$/;"	f	file:
test14	robstest.c	/^static int test14 (void) {$/;"	f	file:
test14	test.cpp	/^int test14 (void) {$/;"	f
test14_0	bstest.c	/^static int test14_0 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test14_0	robstest.c	/^static int test14_0 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test15	bstest.c	/^static int test15 (void) {$/;"	f	file:
test15	robstest.c	/^static int test15 (void) {$/;"	f	file:
test15	test.cpp	/^int test15 (void) {$/;"	f
test15_0	bstest.c	/^static int test15_0 (bstring b0, int pos, const_bstring b1, unsigned char fill, char * res) {$/;"	f	file:
test15_0	robstest.c	/^static int test15_0 (bstring b0, int pos, const_bstring b1, unsigned char fill, char * res) {$/;"	f	file:
test16	bstest.c	/^static int test16 (void) {$/;"	f	file:
test16	robstest.c	/^static int test16 (void) {$/;"	f	file:
test16	test.cpp	/^int test16 (void) {$/;"	f
test16_0	bstest.c	/^static int test16_0 (bstring b0, int pos, const_bstring b1, unsigned char fill, char * res) {$/;"	f	file:
test16_0	robstest.c	/^static int test16_0 (bstring b0, int pos, const_bstring b1, unsigned char fill, char * res) {$/;"	f	file:
test17	bstest.c	/^static int test17 (void) {$/;"	f	file:
test17	robstest.c	/^static int test17 (void) {$/;"	f	file:
test17	test.cpp	/^int test17 (void) {$/;"	f
test17_0	bstest.c	/^static int test17_0 (bstring s1, int pos, int len, char * res) {$/;"	f	file:
test17_0	robstest.c	/^static int test17_0 (bstring s1, int pos, int len, char * res) {$/;"	f	file:
test18	bstest.c	/^static int test18 (void) {$/;"	f	file:
test18	robstest.c	/^static int test18 (void) {$/;"	f	file:
test18	test.cpp	/^int test18 (void) {$/;"	f
test18_0	bstest.c	/^static int test18_0 (bstring b, int len, int res, int mlen) {$/;"	f	file:
test18_0	robstest.c	/^static int test18_0 (bstring b, int len, int res, int mlen) {$/;"	f	file:
test18_1	bstest.c	1193;"	d	file:
test18_1	robstest.c	1193;"	d	file:
test18_1_int	bstest.c	/^static int test18_1_int (bstring b, int len, int res, int mlen, int __line__) {$/;"	f	file:
test18_1_int	robstest.c	/^static int test18_1_int (bstring b, int len, int res, int mlen, int __line__) {$/;"	f	file:
test19	bstest.c	/^static int test19 (void) {$/;"	f	file:
test19	robstest.c	/^static int test19 (void) {$/;"	f	file:
test19	test.cpp	/^int test19 (void) {$/;"	f
test19_0	bstest.c	/^static int test19_0 (bstring b, int len, const char * res, int erv) {$/;"	f	file:
test19_0	robstest.c	/^static int test19_0 (bstring b, int len, const char * res, int erv) {$/;"	f	file:
test1_0	bstest.c	/^static int test1_0 (const void * blk, int len, const char * res) {$/;"	f	file:
test1_0	robstest.c	/^static int test1_0 (const void * blk, int len, const char * res) {$/;"	f	file:
test2	bstest.c	/^static int test2 (void) {$/;"	f	file:
test2	robstest.c	/^static int test2 (void) {$/;"	f	file:
test2	test.cpp	/^int test2 (void) {$/;"	f
test2	testaux.c	/^int test2 (void) {$/;"	f
test20	bstest.c	/^static int test20 (void) {$/;"	f	file:
test20	robstest.c	/^static int test20 (void) {$/;"	f	file:
test20	test.cpp	/^int test20 (void) {$/;"	f
test21	bstest.c	/^static int test21 (void) {$/;"	f	file:
test21	robstest.c	/^static int test21 (void) {$/;"	f	file:
test21	test.cpp	/^int test21 (void) {$/;"	f
test21_0	bstest.c	/^static int test21_0 (bstring b, char sc, int ns) {$/;"	f	file:
test21_0	robstest.c	/^static int test21_0 (bstring b, char sc, int ns) {$/;"	f	file:
test21_1	bstest.c	/^static int test21_1 (bstring b, const_bstring sc, int ns) {$/;"	f	file:
test21_1	robstest.c	/^static int test21_1 (bstring b, const_bstring sc, int ns) {$/;"	f	file:
test22	bstest.c	/^static int test22 (void) {$/;"	f	file:
test22	robstest.c	/^static int test22 (void) {$/;"	f	file:
test22	test.cpp	/^int test22 (void) {$/;"	f
test22_0	bstest.c	/^static int test22_0 (const_bstring b, const_bstring sep, int ns, ...) {$/;"	f	file:
test22_0	robstest.c	/^static int test22_0 (const_bstring b, const_bstring sep, int ns, ...) {$/;"	f	file:
test23	bstest.c	/^static int test23 (void) {$/;"	f	file:
test23	robstest.c	/^static int test23 (void) {$/;"	f	file:
test23	test.cpp	/^int test23 (void) {$/;"	f
test23_aux_open	bstest.c	/^static int test23_aux_open (struct sbstr * sb, bstring b) {$/;"	f	file:
test23_aux_open	robstest.c	/^static int test23_aux_open (struct sbstr * sb, bstring b) {$/;"	f	file:
test23_aux_read	bstest.c	/^static size_t test23_aux_read (void *buff, size_t elsize, size_t nelem, void *parm) {$/;"	f	file:
test23_aux_read	robstest.c	/^static size_t test23_aux_read (void *buff, size_t elsize, size_t nelem, void *parm) {$/;"	f	file:
test23_aux_splitcb	bstest.c	/^static int test23_aux_splitcb (void * parm, int ofs, const struct tagbstring * entry) {$/;"	f	file:
test23_aux_splitcb	robstest.c	/^static int test23_aux_splitcb (void * parm, int ofs, const struct tagbstring * entry) {$/;"	f	file:
test23_aux_splitcbx	bstest.c	/^static int test23_aux_splitcbx (void * parm, int ofs, const struct tagbstring * entry) {$/;"	f	file:
test23_aux_splitcbx	robstest.c	/^static int test23_aux_splitcbx (void * parm, int ofs, const struct tagbstring * entry) {$/;"	f	file:
test24	bstest.c	/^static int test24 (void) {$/;"	f	file:
test24	robstest.c	/^static int test24 (void) {$/;"	f	file:
test24	test.cpp	/^int test24 (void) {$/;"	f
test24_0	bstest.c	/^static int test24_0 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test24_0	robstest.c	/^static int test24_0 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test25	bstest.c	/^static int test25 (void) {$/;"	f	file:
test25	robstest.c	/^static int test25 (void) {$/;"	f	file:
test25	test.cpp	/^int test25 (void) {$/;"	f
test25_0	bstest.c	/^static int test25_0 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test25_0	robstest.c	/^static int test25_0 (bstring s1, int pos, const_bstring s2, int res) {$/;"	f	file:
test26	bstest.c	/^static int test26 (void) {$/;"	f	file:
test26	robstest.c	/^static int test26 (void) {$/;"	f	file:
test26	test.cpp	/^int test26 (void) {$/;"	f
test26_0	bstest.c	/^static int test26_0 (bstring b0, int pos, int len, const_bstring b1, unsigned char fill, char * res) {$/;"	f	file:
test26_0	robstest.c	/^static int test26_0 (bstring b0, int pos, int len, const_bstring b1, unsigned char fill, char * res) {$/;"	f	file:
test27	bstest.c	/^static int test27 (void) {$/;"	f	file:
test27	robstest.c	/^static int test27 (void) {$/;"	f	file:
test27	test.cpp	/^int test27 (void) {$/;"	f
test27_0	bstest.c	/^static int test27_0 (bstring b0, const_bstring b1, const char * res) {$/;"	f	file:
test27_0	robstest.c	/^static int test27_0 (bstring b0, const_bstring b1, const char * res) {$/;"	f	file:
test28	bstest.c	/^static int test28 (void) {$/;"	f	file:
test28	robstest.c	/^static int test28 (void) {$/;"	f	file:
test28	test.cpp	/^int test28 (void) {$/;"	f
test28_0	bstest.c	/^static int test28_0 (bstring s1, int c, int res) {$/;"	f	file:
test28_0	robstest.c	/^static int test28_0 (bstring s1, int c, int res) {$/;"	f	file:
test28_1	bstest.c	/^static int test28_1 (bstring s1, int c, int res) {$/;"	f	file:
test28_1	robstest.c	/^static int test28_1 (bstring s1, int c, int res) {$/;"	f	file:
test28_2	bstest.c	/^static int test28_2 (bstring s1, int c, int pos, int res) {$/;"	f	file:
test28_2	robstest.c	/^static int test28_2 (bstring s1, int c, int pos, int res) {$/;"	f	file:
test28_3	bstest.c	/^static int test28_3 (bstring s1, int c, int pos, int res) {$/;"	f	file:
test28_3	robstest.c	/^static int test28_3 (bstring s1, int c, int pos, int res) {$/;"	f	file:
test29	bstest.c	/^static int test29 (void) {$/;"	f	file:
test29	robstest.c	/^static int test29 (void) {$/;"	f	file:
test29	test.cpp	/^int test29 (void) {$/;"	f
test29_0	bstest.c	/^static int test29_0 (bstring b0, char * s, const char * res) {$/;"	f	file:
test29_0	robstest.c	/^static int test29_0 (bstring b0, char * s, const char * res) {$/;"	f	file:
test2_0	bstest.c	/^static int test2_0 (const_bstring b, char z, const unsigned char * res) {$/;"	f	file:
test2_0	robstest.c	/^static int test2_0 (const_bstring b, char z, const unsigned char * res) {$/;"	f	file:
test3	bstest.c	/^static int test3 (void) {$/;"	f	file:
test3	robstest.c	/^static int test3 (void) {$/;"	f	file:
test3	test.cpp	/^int test3 (void) {$/;"	f
test3	testaux.c	/^int test3 (void) {$/;"	f
test30	bstest.c	/^static int test30 (void) {$/;"	f	file:
test30	robstest.c	/^static int test30 (void) {$/;"	f	file:
test30	test.cpp	/^int test30 (void) {$/;"	f
test30_0	bstest.c	/^static int test30_0 (bstring b0, const unsigned char * s, int len, const char * res) {$/;"	f	file:
test30_0	robstest.c	/^static int test30_0 (bstring b0, const unsigned char * s, int len, const char * res) {$/;"	f	file:
test31	bstest.c	/^static int test31 (void) {$/;"	f	file:
test31	robstest.c	/^static int test31 (void) {$/;"	f	file:
test31	test.cpp	/^int test31 (void) {$/;"	f
test31_0	bstest.c	/^static int test31_0 (bstring b0, const_bstring find, const_bstring replace, int pos, char * res) {$/;"	f	file:
test31_0	robstest.c	/^static int test31_0 (bstring b0, const_bstring find, const_bstring replace, int pos, char * res) {$/;"	f	file:
test31_1	bstest.c	/^static int test31_1 (bstring b0, const_bstring find, const_bstring replace, int pos, char * res) {$/;"	f	file:
test31_1	robstest.c	/^static int test31_1 (bstring b0, const_bstring find, const_bstring replace, int pos, char * res) {$/;"	f	file:
test31_aux	test.cpp	/^static size_t test31_aux (void *buff, size_t elsize, size_t nelem, void *parm) {$/;"	f	file:
test32	bstest.c	/^static int test32 (void) {$/;"	f	file:
test32	robstest.c	/^static int test32 (void) {$/;"	f	file:
test32_0	bstest.c	/^static int test32_0 (const_bstring b, const char * s, int res) {$/;"	f	file:
test32_0	robstest.c	/^static int test32_0 (const_bstring b, const char * s, int res) {$/;"	f	file:
test32_1	bstest.c	/^static int test32_1 (const_bstring b, const char * s, int res) {$/;"	f	file:
test32_1	robstest.c	/^static int test32_1 (const_bstring b, const char * s, int res) {$/;"	f	file:
test33	bstest.c	/^static int test33 (void) {$/;"	f	file:
test33	robstest.c	/^static int test33 (void) {$/;"	f	file:
test33_0	bstest.c	/^static int test33_0 (bstring b0, const char * res) {$/;"	f	file:
test33_0	robstest.c	/^static int test33_0 (bstring b0, const char * res) {$/;"	f	file:
test34	bstest.c	/^static int test34 (void) {$/;"	f	file:
test34	robstest.c	/^static int test34 (void) {$/;"	f	file:
test34_0	bstest.c	/^static int test34_0 (bstring b0, const char * res) {$/;"	f	file:
test34_0	robstest.c	/^static int test34_0 (bstring b0, const char * res) {$/;"	f	file:
test35	bstest.c	/^static int test35 (void) {$/;"	f	file:
test35	robstest.c	/^static int test35 (void) {$/;"	f	file:
test35_0	bstest.c	/^static int test35_0 (const_bstring b0, const_bstring b1, int res) {$/;"	f	file:
test35_0	robstest.c	/^static int test35_0 (const_bstring b0, const_bstring b1, int res) {$/;"	f	file:
test36	bstest.c	/^static int test36 (void) {$/;"	f	file:
test36	robstest.c	/^static int test36 (void) {$/;"	f	file:
test36_0	bstest.c	/^static int test36_0 (const_bstring b0, const_bstring b1, int n, int res) {$/;"	f	file:
test36_0	robstest.c	/^static int test36_0 (const_bstring b0, const_bstring b1, int n, int res) {$/;"	f	file:
test37	bstest.c	/^static int test37 (void) {$/;"	f	file:
test37	robstest.c	/^static int test37 (void) {$/;"	f	file:
test37_0	bstest.c	/^static int test37_0 (const_bstring b0, const_bstring b1, int res) {$/;"	f	file:
test37_0	robstest.c	/^static int test37_0 (const_bstring b0, const_bstring b1, int res) {$/;"	f	file:
test38	bstest.c	/^static int test38 (void) {$/;"	f	file:
test38	robstest.c	/^static int test38 (void) {$/;"	f	file:
test38_aux_bNgetc	bstest.c	/^static int test38_aux_bNgetc (struct emuFile * f) {$/;"	f	file:
test38_aux_bNgetc	robstest.c	/^static int test38_aux_bNgetc (struct emuFile * f) {$/;"	f	file:
test38_aux_bNopen	bstest.c	/^static int test38_aux_bNopen (struct emuFile * f, bstring b) {$/;"	f	file:
test38_aux_bNopen	robstest.c	/^static int test38_aux_bNopen (struct emuFile * f, bstring b) {$/;"	f	file:
test38_aux_bNread	bstest.c	/^static size_t test38_aux_bNread (void *buff, size_t elsize, size_t nelem, struct emuFile * f) {$/;"	f	file:
test38_aux_bNread	robstest.c	/^static size_t test38_aux_bNread (void *buff, size_t elsize, size_t nelem, struct emuFile * f) {$/;"	f	file:
test39	bstest.c	/^static int test39 (void) {$/;"	f	file:
test39	robstest.c	/^static int test39 (void) {$/;"	f	file:
test39_0	bstest.c	/^static int test39_0 (const_bstring b, const_bstring lt, const_bstring rt, const_bstring t) {$/;"	f	file:
test39_0	robstest.c	/^static int test39_0 (const_bstring b, const_bstring lt, const_bstring rt, const_bstring t) {$/;"	f	file:
test3_0	bstest.c	/^static int test3_0 (const_bstring b) {$/;"	f	file:
test3_0	robstest.c	/^static int test3_0 (const_bstring b) {$/;"	f	file:
test4	bstest.c	/^static int test4 (void) {$/;"	f	file:
test4	robstest.c	/^static int test4 (void) {$/;"	f	file:
test4	test.cpp	/^int test4 (void) {$/;"	f
test4	testaux.c	/^int test4 (void) {$/;"	f
test40	bstest.c	/^static int test40 (void) {$/;"	f	file:
test40	robstest.c	/^static int test40 (void) {$/;"	f	file:
test40_0	bstest.c	/^static int test40_0 (bstring b0, const_bstring b1, int left, int len, const char * res) {$/;"	f	file:
test40_0	robstest.c	/^static int test40_0 (bstring b0, const_bstring b1, int left, int len, const char * res) {$/;"	f	file:
test41	bstest.c	/^static int test41 (void) {$/;"	f	file:
test41	robstest.c	/^static int test41 (void) {$/;"	f	file:
test41_0	bstest.c	/^static int test41_0 (bstring b1, int left, int len, const char * res) {$/;"	f	file:
test41_0	robstest.c	/^static int test41_0 (bstring b1, int left, int len, const char * res) {$/;"	f	file:
test42	bstest.c	/^static int test42 (void) {$/;"	f	file:
test42	robstest.c	/^static int test42 (void) {$/;"	f	file:
test42_0	bstest.c	/^static int test42_0 (const_bstring bi, int len, const char * res) {$/;"	f	file:
test42_0	robstest.c	/^static int test42_0 (const_bstring bi, int len, const char * res) {$/;"	f	file:
test43	bstest.c	/^static int test43 (void) {$/;"	f	file:
test43	robstest.c	/^static int test43 (void) {$/;"	f	file:
test44	bstest.c	/^static int test44 (void) {$/;"	f	file:
test44	robstest.c	/^static int test44 (void) {$/;"	f	file:
test44_0	bstest.c	/^static int test44_0 (const char * str) {$/;"	f	file:
test44_0	robstest.c	/^static int test44_0 (const char * str) {$/;"	f	file:
test45	bstest.c	/^static int test45 (void) {$/;"	f	file:
test45	robstest.c	/^static int test45 (void) {$/;"	f	file:
test45_0	bstest.c	/^static int test45_0 (const char * str) {$/;"	f	file:
test45_0	robstest.c	/^static int test45_0 (const char * str) {$/;"	f	file:
test46	bstest.c	/^static int test46 (void) {$/;"	f	file:
test46	robstest.c	/^static int test46 (void) {$/;"	f	file:
test46_0	bstest.c	/^static int test46_0 (const_bstring r, bstring b, int count, const char * fmt, ...) {$/;"	f	file:
test46_0	robstest.c	/^static int test46_0 (const_bstring r, bstring b, int count, const char * fmt, ...) {$/;"	f	file:
test46_1	bstest.c	/^static int test46_1 (bstring b, const char * fmt, const_bstring r, ...) {$/;"	f	file:
test46_1	robstest.c	/^static int test46_1 (bstring b, const char * fmt, const_bstring r, ...) {$/;"	f	file:
test4_0	bstest.c	/^static int test4_0 (const_bstring b, int left, int len, const char * res) {$/;"	f	file:
test4_0	robstest.c	/^static int test4_0 (const_bstring b, int left, int len, const char * res) {$/;"	f	file:
test5	bstest.c	/^static int test5 (void) {$/;"	f	file:
test5	robstest.c	/^static int test5 (void) {$/;"	f	file:
test5	test.cpp	/^int test5 (void) {$/;"	f
test5	testaux.c	/^int test5 (void) {$/;"	f
test5_0	bstest.c	/^static int test5_0 (bstring b0, const_bstring b1, const char * res) {$/;"	f	file:
test5_0	robstest.c	/^static int test5_0 (bstring b0, const_bstring b1, const char * res) {$/;"	f	file:
test5_1	bstest.c	/^static int test5_1 (void) {$/;"	f	file:
test5_1	robstest.c	/^static int test5_1 (void) {$/;"	f	file:
test6	bstest.c	/^static int test6 (void) {$/;"	f	file:
test6	robstest.c	/^static int test6 (void) {$/;"	f	file:
test6	test.cpp	/^int test6 (void) {$/;"	f
test6	testaux.c	/^int test6 (void) {$/;"	f
test6_0	bstest.c	/^static int test6_0 (bstring b, char c, const char * res) {$/;"	f	file:
test6_0	robstest.c	/^static int test6_0 (bstring b, char c, const char * res) {$/;"	f	file:
test7	bstest.c	536;"	d	file:
test7	robstest.c	536;"	d	file:
test7	test.cpp	/^int test7 (void) {$/;"	f
test7	testaux.c	/^int test7 (void) {$/;"	f
test7x8	bstest.c	/^static int test7x8 (char * fnname, int (* fnptr) (const struct tagbstring *, const struct tagbstring *),$/;"	f	file:
test7x8	robstest.c	/^static int test7x8 (char * fnname, int (* fnptr) (const struct tagbstring *, const struct tagbstring *),$/;"	f	file:
test7x8_0	bstest.c	/^static int test7x8_0 (char * fnname, int (* fnptr) (const struct tagbstring *, const struct tagbstring *), const struct tagbstring * b0, const struct tagbstring * b1, int res) {$/;"	f	file:
test7x8_0	robstest.c	/^static int test7x8_0 (char * fnname, int (* fnptr) (const struct tagbstring *, const struct tagbstring *), const struct tagbstring * b0, const struct tagbstring * b1, int res) {$/;"	f	file:
test8	bstest.c	537;"	d	file:
test8	robstest.c	537;"	d	file:
test8	test.cpp	/^int test8 (void) {$/;"	f
test8	testaux.c	/^int test8 (void) {$/;"	f
test9	bstest.c	/^static int test9 (void) {$/;"	f	file:
test9	robstest.c	/^static int test9 (void) {$/;"	f	file:
test9	test.cpp	/^int test9 (void) {$/;"	f
test9	testaux.c	/^int test9 (void) {$/;"	f
test9_0	bstest.c	/^static int test9_0 (const_bstring b0, const_bstring b1, int n, int res) {$/;"	f	file:
test9_0	robstest.c	/^static int test9_0 (const_bstring b0, const_bstring b1, int n, int res) {$/;"	f	file:
testInCharField	bstrlib.c	1279;"	d	file:
testInCharField	bstrlib.c	1289;"	d	file:
tolower	bstrwrap.cpp	/^void CBString::tolower () {$/;"	f	class:Bstrlib::CBString
toupper	bstrwrap.cpp	/^void CBString::toupper () {$/;"	f	class:Bstrlib::CBString
trim	bstrwrap.h	/^	inline void trim (const CBString& b = CBString (bsStaticBlkParms (" \\t\\v\\f\\r\\n"))) {$/;"	f	struct:Bstrlib::CBString
trunc	bstrwrap.cpp	/^void CBString::trunc (int len) {$/;"	f	class:Bstrlib::CBString
unread	bstrwrap.cpp	/^void CBStream::unread (const CBString& s) {$/;"	f	class:Bstrlib::CBStream
upcase	bstrlib.c	558;"	d	file:
vfgetc	testaux.c	/^struct vfgetc {$/;"	s	file:
what	bstrwrap.h	/^	virtual const char *what () const throw () { return msg.c_str(); }$/;"	f	struct:Bstrlib::CBStringException
writeFn	bstraux.c	/^    bNwrite writeFn; \/* fwrite work-a-like fnptr for core stream *\/$/;"	m	struct:bwriteStream	file:
writeallow	bstrwrap.cpp	/^void CBString::writeallow () {$/;"	f	class:Bstrlib::CBString
writeprotect	bstrwrap.cpp	/^void CBString::writeprotect () {$/;"	f	class:Bstrlib::CBString
wspace	bstrlib.c	560;"	d	file:
xxxxxBstring	bstest.c	/^struct tagbstring xxxxxBstring = bsStatic ("xxxxx");$/;"	v	typeref:struct:tagbstring
xxxxxBstring	robstest.c	/^struct tagbstring xxxxxBstring = bsStatic ("xxxxx");$/;"	v	typeref:struct:tagbstring
~CBStream	bstrwrap.cpp	/^CBStream::~CBStream () {$/;"	f	class:Bstrlib::CBStream
~CBString	bstrwrap.cpp	/^CBString::~CBString () {$/;"	f	class:Bstrlib::CBString
~CBStringException	bstrwrap.h	/^	virtual ~CBStringException () throw () {}$/;"	f	struct:Bstrlib::CBStringException
